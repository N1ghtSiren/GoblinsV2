---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Siren.
--- DateTime: 21.11.2022 13:21
---

---@class tokens : table

---@class ChatCommand
---@field tokens tokens
---@field levels integer
---@field action fun(pid: integer, args: string)

--------------------------------------------------------------------
-- private logic
--------------------------------------------------------------------

local branch = storage.CreateNewBranch(storage.branch_ids.chat_commands)

---@param str string
---@return tokens, integer
local function SplitStringToTokens(str)
  local tokens = {}

  for i in string.gmatch(str, "%S+") do
    tokens[#tokens + 1] = i
  end

  return tokens, #tokens
end


---@param tokens1 tokens
---@param tokens2 tokens
---@param level integer
local function CompareTokens(tokens1, tokens2, level)
  if(tokens1[level] == nil or tokens2[level] == nil)then
    return false
  end

  return tokens1[level] == tokens2[level]
end


---@param match string
---@param action fun(pid: integer, args: string)
local function AddCommand(match, action)
  if(branch:exists(match))then
    messages.Send(messages.levels.game_error, "chat command already exists: %s", match)
    return
  end

  local tokens, levels = SplitStringToTokens(match)
  ---@type ChatCommand
  local command = {
    tokens = tokens,
    levels = levels,
    action = action,
  }

  branch:set(match, command)

  --printdf("chat command added: %s; levels: %s", match, levels)
end


---@param match string
local function RemoveCommand(match)
  branch:free(match)
end


---@param chat_string
---@return fun(pid: integer, args: string),  string(commandArgs)
local function ParseChatString(chat_string)
  local tokens = SplitStringToTokens(chat_string)

  for _, v in pairs(branch.data) do

    for level = 1, v.levels do
      if(CompareTokens(tokens, v.tokens, level) == false)then
        break;
      end

      if(level == v.levels)then
        local _, e = string.find(chat_string, v.tokens[level])
        local args = string.sub(chat_string, e+2, string.len(chat_string))

        return v.action, args
      end
    end
  end
end

---@param pid integer
local function PrintAllCommands(pid)
  local str = ""

  for k, _ in pairs(branch.data) do
    str = str .. tostring(k) .. "    "
  end

  messages.SendLocal(pid, messages.levels.info, "all chat commands: \n%s \n", str)
end

--------------------------------------------------------------------
-- ext

---@param chat_string
---@param chat_string2
---@param action fun(pid: integer, args: string)
local function AddTwo(chat_string, chat_string2, action)
  AddCommand(chat_string, action)
  AddCommand(chat_string2, action)
end

--------------------------------------------------------------------
-- public functions
--------------------------------------------------------------------

chatCommands = {
  Add = AddCommand,
  AddTwo = AddTwo,
  Remove = RemoveCommand,
  ParseChatString = ParseChatString,
  PrintAllCommands = PrintAllCommands,
}