---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Siren.
--- DateTime: 30.11.2022 23:00
---

--------------------------------------------------------------------
-- private logic
--------------------------------------------------------------------

--[[
EX_EVENT_UNIT_CAST = alloc()                       -- func(caster, target)
EX_EVENT_UNIT_ATTACK = alloc()                     -- func(caster, target, damage)
EX_EVENT_UNIT_DAMAGE = alloc()                     -- func(caster, target, damage)
EX_EVENT_UNIT_KILL = alloc()                       -- func(caster, target)
EX_EVENT_UNIT_HIT = alloc()                        -- func(caster, source, damage)
EX_EVENT_UNIT_LEVELUP = alloc()                    -- func(caster, new_level)
EX_EVENT_UNIT_DEATH = alloc()                      -- func(caster, source)
EX_EVENT_ITEM_EQUIP = alloc()                      -- func(caster, item)
EX_EVENT_ITEM_DROP = alloc()                       -- func(caster, item)
EX_EVENT_ITEM_DEATH = alloc()                      -- func(item)
EX_EVENT_BUFF_APPLY = alloc()                      -- func(caster, buffdata)
EX_EVENT_BUFF_REMOVE = alloc()                     -- func(caster, buffdata)
EX_EVENT_SHIELD_APPLY = alloc()                    -- func(caster, shielddata)
EX_EVENT_SHIELD_DAMAGE = alloc()                   -- func(caster, source, damage, shielddata)
EX_EVENT_SHIELD_BREAK = alloc()                    -- func(caster, source, damage, shielddata)
EX_EVENT_SHIELD_EXPIRE = alloc()                   -- func(caster, shielddata)
EX_EVENT_ABILITY_ON_CAST = alloc()                 -- func(caster, target)
EX_EVENT_ABILITY_ON_ADD = alloc()                  -- func(caster, abilityid)
EX_EVENT_ABILITY_ON_REMOVE = alloc()               -- func(caster, abilityid)
]]

-- for now only 3 types:
-- ability, item, unit
-- for now abilities and items arent instantiable, events just read from bd each time
-- units - we need to initialize

--------------------------------------------------------------------

---@class abilityevents
---@field onCast fun(caster: unit, target: unit)
---@field onAdd fun(caster: unit, abilityid: string|integer)
---@field onRemove fun(caster: unit, abilityid: string|integer)

local template_abilityevents = {
  onCast = DoNothing,      -- func
  onAdd = DoNothing,       -- func
  onRemove = DoNothing,    -- func
}

---@return abilityevents
local function GetAbilityEventsTemplate()
  return table.deepCopy(template_abilityevents)
end

---@param abilityid string|integer
---@param caster unit
---@param target unit
local function InvokeAbilityEvent_OnCast(abilityid, caster, target)
  local abil = database.abilities.Read(abilityid)

  if(abilityEntry == nil) then return end                    -- totally unknown ability
  if(abilityEntry.events == nil) then return end             -- known ability without allocated events
  if(abilityEntry.events.onCast == nil) then return end      -- specific event not defined

  abil.events.onCast(caster, target)
end

---@param caster unit
---@param abilityid string|integer
local function InvokeAbilityEvent_OnAdd(caster, abilityid)
  local abilityEntry = database.abilities.Read(abilityid)

  if(abilityEntry == nil) then return end                    -- totally unknown ability
  if(abilityEntry.events == nil) then return end             -- known ability without allocated events
  if(abilityEntry.events.onAdd == nil) then return end       -- specific event not defined

  abilityEntry.events.onAdd(caster, abilityid)
end

---@param caster unit
---@param abilityid string|integer
local function InvokeAbilityEvent_OnRemove(caster, abilityid)
  local abilityEntry = database.abilities.Read(abilityid)
  if(abilityEntry == nil or abilityEntry.events == nil) then return end

  if(abilityEntry == nil) then return end                    -- totally unknown ability
  if(abilityEntry.events == nil) then return end             -- known ability without allocated events
  if(abilityEntry.events.onRemove == nil) then return end    -- specific event not defined

  abilityEntry.events.onRemove(caster, abilityid)
end

--------------------------------------------------------------------

---@class itemevents
---@field onEquip fun(caster: unit, item: item)
---@field onDrop fun(caster: unit, item: item)
---@field onDeath fun(item: item)

local template_itemevents = {
  onEquip = DoNothing,       -- func
  onDrop = DoNothing,        -- func
  onDeath = DoNothing,       -- func
}

---@return itemevents
local function GetItemEventsTemplate()
  return table.deepCopy(template_itemevents)
end

---@param item item
local function InvokeItemEvent_OnDeath(item)
  item = HandleToItem(item)  -- cuz it assumes it as type
  local itemEntry = database.items.Read(GetItemTypeId(item))

  if(itemEntry == nil) then return end                    -- totally unknown item
  if(itemEntry.events == nil) then return end             -- known item without allocated events
  if(itemEntry.events.onDeath == nil) then return end   -- specific event not defined

  itemEntry.events.onDeath(item)
end

---@param caster unit
---@param item item
local function InvokeItemEvent_onEquip(caster, item)
  local itemEntry = database.items.Read(GetItemTypeId(item))

  if(itemEntry == nil) then return end                    -- totally unknown item
  if(itemEntry.events == nil) then return end             -- known item without allocated events
  if(itemEntry.events.onEquip == nil) then return end     -- specific event not defined

  itemEntry.events.onEquip(caster, item)
end

---@param caster unit
---@param item item
local function InvokeItemEvent_onDrop(caster, item)
  local itemEntry = database.items.Read(GetItemTypeId(item))

  if(itemEntry == nil) then return end                    -- totally unknown item
  if(itemEntry.events == nil) then return end             -- known item without allocated events
  if(itemEntry.events.onDrop == nil) then return end      -- specific event not defined

  itemEntry.events.onDrop(caster, item)
end

--------------------------------------------------------------------

---@class unitevents
---@field onCast fun(caster: unit, target: unit)
---@field onAttack fun(caster: unit, target: unit, damage: number)
---@field onDamage fun(caster: unit, target: unit, damage: number)
---@field onHit fun(caster: unit, source: unit, damage: number)
---@field onKill fun(caster: unit, source: unit)
---@field onDeath fun(caster: unit, source: unit)

local template_unitevents = {
  onCast = DoNothing,       -- func
  onAttack = DoNothing,     -- func
  onDamage = DoNothing,     -- func
  onHit = DoNothing,        -- func
  onKill = DoNothing,       -- func
  onDeath = DoNothing,      -- func
}

---@return unitevents
local function GetUnitEventsTemplate()
  return table.deepCopy(template_unitevents)
end


---@param unit unit
---@param eventid string
local function InvokeUnitEvent(unit, eventid, ...)
  local gunit = privateDataRequest.gunitData(unit)
  local event_list = gunit.events[eventid]
  --make determined tables
end

-- 18 functions ? 6 x add/remove/invoke
--

--------------------------------------------------------------------
-- public functions
--------------------------------------------------------------------

events = {
  --static
  GetAbilityEventsTemplate = GetAbilityEventsTemplate,
  GetUnitEventsTemplate = GetUnitEventsTemplate,
  GetItemEventsTemplate = GetItemEventsTemplate,
  --shared
  invoke = {
    ability = {
      onAdd = InvokeAbilityEvent_OnAdd,
      onCast = InvokeAbilityEvent_OnCast,
      onRemove = InvokeAbilityEvent_OnRemove,
    },
    item = {
      onEquip = InvokeItemEvent_onEquip,
      onDrop = InvokeItemEvent_onDrop,
      onDeath = InvokeItemEvent_OnDeath,
    },
    unit = {

    },
  },
  --runtime
  add = {
    unit = {},
    -- 6 func
  },
  remove = {
    unit = {},
    -- 6 func
  },
}