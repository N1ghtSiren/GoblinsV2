---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Siren.
--- DateTime: 26.11.2022 12:50
---

---@class gitemData
---@field item item
---@field stats stats
---@field type integer
---@field slot integer
---@field hero_class integer
---@field is_single boolean
---@field isNonInitialized boolean

---@type gitemData
local template_gitemData =
{
  item = nil,
  stats = nil,
  type = constants.item_types.permanent,
  slot = constants.item_slots.none,
  hero_class = constants.hero_class.none,
  is_single = false,
  isNonInitialized = true,
}

--------------------------------------------------------------------
-- private logic
--------------------------------------------------------------------

local branch = storage.CreateNewBranch(storage.branch_ids.gitem)
privateDataRequest.register.gitem(branch)

local itemDeathTrigger = 1

local function InitItemDeathTrigger()
  itemDeathTrigger = CreateTrigger()
  TriggerAddAction(itemDeathTrigger, function()
    events.invoke.item.onDeath(GetTriggerWidget())
  end)
end

---@param item item
local function RegisterItemDeath(item)
  TriggerRegisterDeathEvent(itemDeathTrigger, item)
end

---@return gitemData
local function GetTemplate()
  return table.deepCopy(template_gitemData)
end


---@param item item
local function Alloc(item)
  local gitemData = GetTemplate()
  gitemData.item = item

  branch:set(item, gitemData)

  return gitemData
end


---@param gitemData gitemData
local function Init(gitemData)
  local itemid, dbEntry

  itemid = GetItemTypeId(gitemData.item)
  dbEntry = database.items.Read(itemid)

  if(dbEntry == nil)then
    messages.Send(messages.levels.game_error, "database contains no info about item: %s", itemid)
  else
    gitemData.isNonInitialized = false
    gitemData.stats = dbEntry.stats
    gitemData.type = dbEntry.type
    gitemData.slot = dbEntry.slot
    gitemData.hero_class = dbEntry.hero_class
    gitemData.is_single = dbEntry.is_single
  end

  RegisterItemDeath(gitemData.item)
end


---@param itemid string
---@param x number
---@param y number
---@return item
local function Create(itemid, x, y)
  local item = CreateItem(fourcc(itemid), x, y)
  local gitemData = Alloc(item)

  Init(gitemData)

  return item
end


---@param item item
local function Delete(item)
  RemoveItem(item)
  -- Drop trig instantly procs, and it needs itemdata
  -- suka don't change order here
  branch:free(item)
end

---@param item item
local function Validate(item)
  local gitemData

  if(branch:exists(item) == false)then
    gitemData = Alloc(item)
    Init(gitemData)
  else
    gitemData = branch:get(item)
  end

  if(gitemData.isNonInitialized)then
    messages.Send(messages.levels.game_error, "item has no stats, and no dbEntry: %s", GetItemName(gitemData.item))
  end
end

--------------------------------------------------------------------

local visuals_item_types = {
  [constants.item_types.permanent] = "Экипировка",
  [constants.item_types.resource] = "Ресурс",
  [constants.item_types.material] = "Материал",
  [constants.item_types.recipe] = "Рецепт",
  [constants.item_types.consumable] = "Расходник",
}

local visuals_slot_names = {
  [constants.item_slots.none] = "Нет типа",
  [constants.item_slots.weapon] = "Оружие",
  [constants.item_slots.armour] = "Броня",
  [constants.item_slots.full_set] = "Сет",
  [constants.item_slots.accessory] = "Аксессуар",
}


local visuals_hero_restrictions = {
  [constants.hero_class.none] = "для всех гоблинов",
  [constants.hero_class.stalker] = "только для Сталкера!",
  [constants.hero_class.medic] = "только для Медика!",
  [constants.hero_class.engineer] = "только для Инженера!",
  [constants.hero_class.sniper] = "только для Снайпера!",
  [constants.hero_class.gunner] = "только для Пулемётчика!",
  [constants.hero_class.racketeer] = "только для Ракетчика!",
  [constants.hero_class.pyromaniac] = "только для Пироманьяка!",
  [constants.hero_class.demolitionist] = "только для Подрывника!",
}


---@param itemDbEntry item_dbEntry
local function UpdateView(itemDbEntry)
  --kekL

  --generate description
  ---@param origin string
  ---@param variable number
  ---@param text string
  ---@return string
  local function ConditionalStringBuild(origin, variable, text, text2)
    if(variable ~= 0)then
      origin = origin .. "\n" .. text .. tostring(variable)

      if(text2 ~= nil)then origin = origin .. text2 end
    end

    return origin
  end

  local fcc_id = fourcc(itemDbEntry.id)
  local description = "Тип предмета: " .. visuals_item_types[itemDbEntry.type] .. "\n"

  if(itemDbEntry.is_single)then
    description = description .. "Может быть только один\n"
  end

  if(itemDbEntry.type == constants.item_types.permanent)then
    description = description .. visuals_slot_names[itemDbEntry.slot] .. ", "
      .. visuals_hero_restrictions[itemDbEntry.hero_class] .. "\n\n"
  end

  description = description .. itemDbEntry.sign .. "\n"

  local stats = itemDbEntry.stats
  description = ConditionalStringBuild(description, stats.max_life, "Здоровье: +")
  description = ConditionalStringBuild(description, stats.max_mana, "Мана: +")
  description = ConditionalStringBuild(description, stats.str, "Сила: +")
  description = ConditionalStringBuild(description, stats.agi, "Ловкость: +")
  description = ConditionalStringBuild(description, stats.int, "Интеллект: +")
  description = ConditionalStringBuild(description, stats.dps, "Урон в сек: +")
  description = ConditionalStringBuild(description, stats.armour, "Броня: +")
  description = ConditionalStringBuild(description, stats.hp_regen, "Хп в сек: +")
  description = ConditionalStringBuild(description, stats.mp_regen, "Мп в сек: +")
  description = ConditionalStringBuild(description, stats.attackspeed, "Скорость атаки: +", "%")

  --
  SetItemBaseNameById(fcc_id, itemDbEntry.name)
  SetItemBaseTipById(fcc_id, itemDbEntry.name)

  SetItemBaseUberTipById(fcc_id, description)
  SetItemBaseDescriptionById(fcc_id, description)

  SetItemBaseIconById(fcc_id, itemDbEntry.icon)
end


local function InitAllItems()
  local branchCopy = database.items.GetFullCopy()

  for _, gitemData in pairs(branchCopy) do
    UpdateView(gitemData)
  end
end

--------------------------------------------------------------------

local errors_slot_limit = {
  [constants.item_slots.weapon] = "Вы можете носить только "
          .. constants.max_permanent_item_count[constants.item_slots.weapon] .. " оружия!",
  [constants.item_slots.armour] = "Вы можете носить только "
          .. constants.max_permanent_item_count[constants.item_slots.armour] .. " броню!",
  [constants.item_slots.full_set] = "Вы можете носить только "
          .. constants.max_permanent_item_count[constants.item_slots.full_set] .. " сет!",
  [constants.item_slots.accessory] = "Вы можете носить только "
          .. constants.max_permanent_item_count[constants.item_slots.accessory] .. " аксессуара!",
}


local errors_hero_restriction = {
  [constants.hero_class.stalker] = "С этим предметом справится только Сталкер.",
  [constants.hero_class.medic] = "Эту штуку опознает только Медик.",
  [constants.hero_class.engineer] = "Только Инженеру под силу разобраться с этим.",
  [constants.hero_class.sniper] = "Лишь Снайпер найдёт этому применение.",
  [constants.hero_class.gunner] = "Патроны для этого есть только у Пулемётчика.",
  [constants.hero_class.racketeer] = "Эту хню поднимет только Ракетчик.",
  [constants.hero_class.pyromaniac] = "С этим зажжёт лишь Пироманьяк.",
  [constants.hero_class.demolitionist] = "Только у Подрывника это хорошо рванёт.",
}


---@param pid integer
local function ShowSingleItemError(pid)
  messages.SendLocal(pid, messages.levels.info, "Вы можете носить только 1 такой предмет!")
end

---@param pid integer
---@param slot integer
local function ShowSlotLimitError(pid, slot)
  messages.SendLocal(pid, messages.levels.info, errors_slot_limit[slot])
end

---@param pid integer
---@param hero_class_on_item integer
local function ShowItemHeroRestrictionError(pid, hero_class_on_item)
  messages.SendLocal(pid, messages.levels.info, errors_hero_restriction[hero_class_on_item])
end

--------------------------------------------------------------------
-- public functions
--------------------------------------------------------------------

gitem = {
  InitTriggers = InitItemDeathTrigger,
  InitAllItems = InitAllItems,
  Create = Create,
  Validate = Validate,
  Delete = Delete,
  ShowError = {
    SingleItem = ShowSingleItemError,
    SlotLimit = ShowSlotLimitError,
    HeroRestriction = ShowItemHeroRestrictionError,
  }
}