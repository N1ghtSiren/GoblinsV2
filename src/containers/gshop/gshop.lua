---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Siren.
--- DateTime: 27.10.2022 16:17
---

--@todo make it normal class oncewhen

---@class gshopData
---@field unit unit
---@field stock_items table<string>
---@field sell_trig trigger


local ABILITY_SELL_ITEMS = "Asid"
local ABILITY_PICK_UNIT = "Aneu"
local ABILITY_INVUL_NEUTRAL = "Avul"
local ABILITY_INVENTORY = "AInv"

local template_gshopData = {
  unit = nil,
  stock_items = {},
  sell_trig = nil,
}

--------------------------------------------------------------------
-- private logic
--------------------------------------------------------------------

---@param gshopData gshopData
local function UpdateView(gshopData)
  local u = gshopData.unit
  local fourcc = fourcc

  for _, v in pairs(gshopData.stock_items) do
    RemoveItemFromStock(u, fourcc(v))
  end

  for _, v in pairs(gshopData.stock_items) do
    AddItemToStock(u, fourcc(v), 0, 1)
  end
end

--------------------------------------------------------------------

local branch = storage.CreateNewBranch(storage.branch_ids.gshop)

---@return gshopData
local function GetTemplate()
  return table.deepCopy(template_gshopData)
end

---@param unit unit
---@return gshopData
local function Alloc(unit)
  local gshopData = GetTemplate()
  gshopData.unit = unit
  branch:set(unit, gshopData)

  return gshopData
end

---@param gshopData gshopData
local function Init(gshopData)
  local u = gshopData.unit

  UnitAddAbility(u, fourcc(ABILITY_SELL_ITEMS))
  UnitAddAbility(u, fourcc(ABILITY_PICK_UNIT))
  UnitAddAbility(u, fourcc(ABILITY_INVUL_NEUTRAL))
  UnitRemoveAbility(u, fourcc(ABILITY_INVENTORY))

  gshopData.sell_trig = CreateTrigger()

  TriggerRegisterUnitEvent(gshopData.sell_trig, u, EVENT_UNIT_SELL_ITEM)
  TriggerAddAction(gshopData.sell_trig, function()
    UpdateView(gshopData)
  end)
end


---@param gshopData gshopData
---@param itemid string
local function AddSoldItem(gshopData, itemid)
  SetItemBaseStockReplenishIntervalById(fourcc(itemid), 0.5)

  if(table.contains(gshopData.stock_items, itemid) == false)then
    table.insert(gshopData.stock_items, itemid)
  end

  UpdateView(gshopData)
end

---@param gshopData gshopData
---@param itemid string
local function RemoveSoldItem(gshopData, itemid)
  table.removeValue(gshopData.stock_items, itemid)

  UpdateView(gshopData)
end


---@param unitid string
---@param x real
---@param y real
---@param preset_id string
---@return unit
local function CreateFromPreset(unitid, x, y, preset_id)
  local unit, gshopData, gshopPreset

  unit = gunit.Create(PLAYER_NEUTRAL_PASSIVE, unitid, x, y)
  gshopData = Alloc(unit)
  Init(gshopData)

  gshopPreset = privateDataRequest.gshopPreset(preset_id)
  for k, v in pairs(gshopPreset.soldItems) do
    AddSoldItem(gshopData, v)
  end

  return unit
end

---@param unit unit
local function Delete(unit)
  local gshopData = branch:get(unit)

  UnitRemoveAbility(u, fourcc(ABILITY_SELL_ITEMS))
  UnitRemoveAbility(u, fourcc(ABILITY_PICK_UNIT))
  UnitRemoveAbility(u, fourcc(ABILITY_INVUL_NEUTRAL))

  DestroyTrigger(gshopData.sell_trig)

  UpdateView(gshopData)
  branch:free(unit)
end

--------------------------------------------------------------------
-- public functions
--------------------------------------------------------------------

gshop = {
  CreateShopFromPreset = CreateFromPreset,
  Delete = Delete,
  AddItem = AddSoldItem,
  RemoveItem = RemoveSoldItem,
}