---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Siren.
--- DateTime: 09.11.2022 6:03
---

--------------------------------------------------------------------
-- private logic
--------------------------------------------------------------------

saveloader_modules = {}
local modules = saveloader_modules
SDoFile("containers\\saveloader\\modules\\driveAccessor.lua")
SDoFile("containers\\saveloader\\modules\\chatRecorder.lua")
SDoFile("containers\\saveloader\\modules\\contentEncoder.lua")
SDoFile("containers\\saveloader\\modules\\savedataGenerator.lua")
saveloader_modules = nil


local SAVE_FOLDER = "goblinSurvival"
local SAVE_FILE_TEMPLATE = [[
version: %s
timestamp: %s
code:
%s]]


---@param savecode string
---@return string
local function CreateFileContent(savecode)
  local timestamp, file_content

  timestamp = tostring(os.date("%H:%M:%S %d %m %Y"))
  file_content = string.format(SAVE_FILE_TEMPLATE, constants.map_version, timestamp, savecode)

  return file_content
end


---@param pid integer
---@param filename string
local function TrySavePlayer(pid, filename)
  local is_valid, savedata, savecode, file_content

  is_valid, savedata = modules.savedataGenerator.Create(pid)
  if(is_valid == false) then
    messages.SendLocal(pid, messages.levels.info, "error while creating savedata")
    return
  end

  savecode = modules.contentEncoder.Encode(savedata)
  file_content = CreateFileContent(savecode)

  is_valid = modules.driveAccessor.WriteFile(SAVE_FOLDER, filename, file_content)
  if(is_valid == false) then
    messages.SendLocal(pid, messages.levels.info, "error while creating file")
    return
  end

  messages.SendLocal(pid, messages.levels.info, "file saved in folder %s", SAVE_FOLDER)
end


---@param pid integer
---@param savecode string
local function TryLoadCode(pid, savecode)
  local is_valid, savedata

  is_valid, savedata = modules.contentEncoder.Decode(savecode)
  if(is_valid == false) then
    messages.SendLocal(pid, messages.levels.info, "error while decoding save")
    return
  end

  modules.savedataGenerator.Restore(pid, savedata)
end


---@param file_content string
---@return boolean, string
local function ParseFile(file_content, pattern)
  local first, last, code

  first, last, _ = string.find(file_content, pattern)
  if(first == nil)then
    printd("cannot find pattern in file content")
    return false
  end

  code = string.sub(file_content, last+2, string.len(file_content))

  return true, code
end

---@param pid integer
---@param filename string
local function TryLoadFile(pid, filename)
  local is_valid, file_content, savecode, syncInstance

  -- validate
  if(GetLocalPlayer() == Player(pid))then
    is_valid, file_content  = modules.driveAccessor.ReadFile(SAVE_FOLDER, filename)
    if(is_valid == false) then
      messages.SendLocal(pid, messages.levels.info, "error while reading file")
      return
    end

    is_valid, savecode = ParseFile(file_content, "code:")
    if(is_valid == false) then
      messages.SendLocal(pid, messages.levels.info, "error while parsing file")
      return false
    end

    if(modules.contentEncoder.Decode(savecode) == false) then
      messages.SendLocal(pid, messages.levels.info, "error while decoding save")
      return false
    end
  end

  syncInstance = sync.Prepare(pid)
  sync.String(syncInstance, savecode, function(pid_from, syncData)
    local _, savedata = modules.contentEncoder.Decode(syncData)
    modules.savedataGenerator.Restore(pid_from, savedata)
  end)

end

--------------------------------------------------------------------
-- public functions
--------------------------------------------------------------------

saveloader = {
  StartRecordChat = modules.chatRecorder.StartRecord,
  EndRecordChat = modules.chatRecorder.EndRecord,
  LoadFile = TryLoadFile,
  LoadCode = TryLoadCode,
  SavePlayer = TrySavePlayer,
}