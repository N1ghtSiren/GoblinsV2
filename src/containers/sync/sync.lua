---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Siren.
--- DateTime: 27.11.2022 11:24
---

---@class syncInstance
---@field data string
---@field key integer
---@field from integer  -- pid of syncing player
---@field action fun(pid_from: integer, syncData:string ): void
---@field timer timer

--------------------------------------------------------------------
-- private logic
--------------------------------------------------------------------

local branch = storage.CreateNewBranch(storage.branch_ids.sync)
local hashtable = nil
local PARENT_KEY = 42
local key_counter = 1024


---@param syncInstance syncInstance
local function Delete(syncInstance)
  branch:free(syncInstance.key)
end


---@param pid integer
---@return syncInstance
local function Alloc(pid)
  local instance = {
    data = "",
    key = key_counter,
    from = pid,
    action = nil,
    timer = nil,
  }

  key_counter = key_counter + 1

  branch:set(instance.key, instance)

  return instance
end


---@param pid integer
---@param aliveTimeSec integer
---@return syncInstance
local function Create(pid, aliveTimeSec)
  aliveTimeSec = aliveTimeSec or 5
  local instance = Alloc(pid)
  instance.timer = CreateTimer()

  TimerStart(instance.timer, aliveTimeSec, false, function()
    Delete(instance)
    DestroyTimer(GetExpiredTimer())
  end)

  return instance
end


---@param syncInstance syncInstance
---@param str string
---@param onSyncAction fun(pid_from: integer, syncData:string ): void
local function SyncStringC(syncInstance, str, onSyncAction)
  syncInstance.action = onSyncAction

  if(GetLocalPlayer() == Player(syncInstance.from))then
    SaveStr(hashtable, PARENT_KEY, syncInstance.key, str)
    SyncSavedString(hashtable, PARENT_KEY, syncInstance.key)
  end
end


local function InitSync()
  hashtable = InitHashtable()
  local trig = CreateTrigger()

  for i = 0, 15 do
    TriggerRegisterPlayerHashtableDataSyncEvent(trig, Player(i), hashtable)
  end

  TriggerAddAction(trig, function()
    local key = GetSyncSavedChildKey()
    local syncInstance = branch:get(key)

    if(syncInstance == nil) then return end

    syncInstance.action(syncInstance.from, LoadStr(hashtable, PARENT_KEY, key))

    RemoveSavedString(hashtable, PARENT_KEY, key)
  end)
end

--------------------------------------------------------------------
-- public functions
--------------------------------------------------------------------

sync = {
  Init = InitSync,
  Prepare = Create,
  String = SyncStringC
}