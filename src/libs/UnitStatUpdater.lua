---
--- Generated by Luanalysis
--- Created by Siren.
--- DateTime: 06.06.2023 2:51
---

UnitStatUpdater = {}

---@type table<statKey, fun(u: unit, value: number):void>
local OnStatUpdate = {}


--region updaters
OnStatUpdate["str"] = function(u, value)
  SetHeroStr(u, value, true)
end

OnStatUpdate["agi"] = function(u, value)
  SetHeroAgi(u, value, true)
end

OnStatUpdate["int"] = function(u, value)
  SetHeroInt(u, value, true)
end

OnStatUpdate["dmg"] = function(u, _)
  local dps, dmg = u.stats.dps, u.stats.dmg
  local base_as = u.base_stats.attackspeed

  --if both == error; apply dps then
  local is_both = dps ~= 0 and dmg ~= 0
  if(is_both or dmg == 0)then
    if(is_both)then
      Logger.SendInfo("unit %s using both 'dps: %s' and 'dmg: %s' stats\nUsing 'dps' ", GetUnitName(u), dps, dmg)
    end

    local attacks_per_sec = 1 / base_as
    local dmg_per_hit = dps / attacks_per_sec
    SetUnitBaseDamageByIndex(u, 0, math.max(R2I(dmg_per_hit)-1, 1))
    return
  end

  if(dmg ~= 0)then
    SetUnitBaseDamageByIndex(u, 0, math.max(R2I(dmg)-1, 1))
  end

end

OnStatUpdate["dps"] = OnStatUpdate["dmg"] --same function

OnStatUpdate["armour"] = function(u, value)
  value = math.max(R2I(value), 0)
  SetUnitArmour(u, value)
end

OnStatUpdate["life_max"] = function(u, value)
  value = math.max(R2I(value), 1)
  SetUnitMaxLife(u, value)
end

OnStatUpdate["mana_max"] = function(u, value)
  value = math.max(R2I(value), 0)
  SetUnitMaxMana(u, value)
end

OnStatUpdate["life_regen"] = function(u, value)
  SetUnitLifeRegen(u, R2I(value))
end

OnStatUpdate["mana_regen"] = function(u, value)
  SetUnitManaRegen(u, R2I(value))
end

OnStatUpdate["as_percent"] = function(u, _)
  local base_as = u.base_stats.attackspeed
  local as_percent = math.clamp(base_as, 20, 500) * 0.01
  local as_cd = base_as / (1 + as_percent)

  SetUnitAttackCooldownByIndex(u, 0, as_cd)
end

OnStatUpdate["move_speed"] = function(u, value)
  value = math.max(value, 1)
  SetUnitMoveSpeed(u, value)
end

OnStatUpdate["sight_radius"] = function(u, value)
  value = math.max(value, 128)
  SetUnitCurrentSight(u, value)
end

OnStatUpdate["attack_range"] = function(u, value)
  value = R2I(value)
  value = math.clamp(value, 64, 9999)

  SetUnitAttackRangeByIndex(u, 0, value)

  --wont work, applies to all units
  --SetUnitRealField(u, UNIT_RF_ACQUISITION_RANGE, value + 50)
end

--endregion updaters

---@param u unit
---@param key_list statKey[]
function UnitStatUpdater.Update(u, key_list)
  --похуй в каком порядке, главное в одинаковом для всех
  local sorted_keys = tableValuesToSortedTable(key_list)

  for _, v in ipairs(sorted_keys) do
    OnStatUpdate[v](u, u.stats[v])
  end

end

---@param u unit
function UnitStatUpdater.ForceUpdate(u)
  --похуй в каком порядке, главное в одинаковом для всех
  stats.ForAllKeys(function(stat_key)
    OnStatUpdate[stat_key](u, u.stats[stat_key])
  end)
end