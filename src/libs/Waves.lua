---
--- Generated by Luanalysis
--- Created by Siren.
--- DateTime: 09.06.2023 0:12
---

--[[
waves system {
  wave_type = "mobs"|"boss"|"special",
  unitid = string
  unit_amount = number
  grace_time = number

  msg_on_wave_start = string
  msg_on_wave_end = string

--todo: if(wave_type == "special")then SpecialWaveData = {
  onWaveStart = func,
  onWaveProgress = func,
  onWaveComplete = func,
  }
 }
]]


---@alias waveType "mobs"|"boss"|"special"

---@shape waveProps
---@field wave_id integer
---@field wave_type waveType
---@field unitid string
---@field unit_amount number
---@field grace_time number
---@field msg_on_wave_start string
---@field msg_on_wave_finish string
--[[
  spawn points
  spawn interval?
]]

local branch = NewBranch()
---@type waveProps
local current_wave = nil

---@param props waveProps
local function RegisterWave(props)
  branch:set(props.wave_id, props)
end

RegisterWave({
  wave_id = 1,
  wave_type = "mobs",
  unitid = "n000",
  unit_amount = 30,
  grace_time = 30,
  msg_on_wave_start = "aboba",
  msg_on_wave_finish = "aboba",
})


local function BeginWaveSpawnLoop()
  local ticks = current_wave.unit_amount;
  local timer = CreateTimer()

  Logger.SendInfo("wave [%s] is starting", current_wave.wave_id)

  TimerStart(timer, 2, true, function()
    Logger.SendInfo("unit spawned")
    local u = NewUnit(constants.PLAYER_ENEMY, current_wave.unitid, 1000, 1000)
    IssuePointOrder(u, "attack", 0, 0)

    ticks = ticks - 1
    if(ticks == 0)then
      DestroyTimer(timer)
    end
  end)
end


---@param id number
---@overload fun() : void
local function PrepareNextWave(id)
  id = id or 1
  current_wave = branch:get(id)

  if(current_wave == nil)then
    Logger.SendError("Wave [%s] failed to start: not found", id)
    return
  end

  Logger.SendInfo("wave [%s] will start in %s seconds", id, current_wave.grace_time)
  TimerStart(CreateTimer(), current_wave.grace_time, false, function()
    BeginWaveSpawnLoop()
    DestroyTimer(GetExpiredTimer())
  end)
end


Waves = {
  RegisterWave = RegisterWave,
  PrepareNextWave = PrepareNextWave,
}